Q: Is one sorting algorithm always faster than another?
A: Not necessarily. Some situations are more optimal for certain algorithms

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: Although they have the same time complexity.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: Asymptotical focuses on worst case scenarios whereas empirical can give insight into actual differences such as between the Bubble/wiping/insertion sorts

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: Yes, unless a O(1) sorting algorithm is possible.

Q: How does changing nrepeats change the plot?
A: Increases the general time taken for each trial

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No. The runtime will vary based off computer conditions.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: In the case where you have 4 2 3 1.
Bubble sort:
 4231
 2314
 2134
 1234
 Wiping:
 4231
 2314
 1234
 Numbers that are small and near the end of the array require many more iterations for bubble sort to move, whereas wiping can move them in one iteration.